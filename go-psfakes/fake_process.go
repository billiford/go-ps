// Code generated by counterfeiter. DO NOT EDIT.
package gopsfakes

import (
	"sync"

	ps "github.com/billiford/go-ps"
)

type FakeProcess struct {
	ExecutableStub        func() string
	executableMutex       sync.RWMutex
	executableArgsForCall []struct {
	}
	executableReturns struct {
		result1 string
	}
	executableReturnsOnCall map[int]struct {
		result1 string
	}
	PPidStub        func() int
	pPidMutex       sync.RWMutex
	pPidArgsForCall []struct {
	}
	pPidReturns struct {
		result1 int
	}
	pPidReturnsOnCall map[int]struct {
		result1 int
	}
	PidStub        func() int
	pidMutex       sync.RWMutex
	pidArgsForCall []struct {
	}
	pidReturns struct {
		result1 int
	}
	pidReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcess) Executable() string {
	fake.executableMutex.Lock()
	ret, specificReturn := fake.executableReturnsOnCall[len(fake.executableArgsForCall)]
	fake.executableArgsForCall = append(fake.executableArgsForCall, struct {
	}{})
	stub := fake.ExecutableStub
	fakeReturns := fake.executableReturns
	fake.recordInvocation("Executable", []interface{}{})
	fake.executableMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcess) ExecutableCallCount() int {
	fake.executableMutex.RLock()
	defer fake.executableMutex.RUnlock()
	return len(fake.executableArgsForCall)
}

func (fake *FakeProcess) ExecutableCalls(stub func() string) {
	fake.executableMutex.Lock()
	defer fake.executableMutex.Unlock()
	fake.ExecutableStub = stub
}

func (fake *FakeProcess) ExecutableReturns(result1 string) {
	fake.executableMutex.Lock()
	defer fake.executableMutex.Unlock()
	fake.ExecutableStub = nil
	fake.executableReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeProcess) ExecutableReturnsOnCall(i int, result1 string) {
	fake.executableMutex.Lock()
	defer fake.executableMutex.Unlock()
	fake.ExecutableStub = nil
	if fake.executableReturnsOnCall == nil {
		fake.executableReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.executableReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeProcess) PPid() int {
	fake.pPidMutex.Lock()
	ret, specificReturn := fake.pPidReturnsOnCall[len(fake.pPidArgsForCall)]
	fake.pPidArgsForCall = append(fake.pPidArgsForCall, struct {
	}{})
	stub := fake.PPidStub
	fakeReturns := fake.pPidReturns
	fake.recordInvocation("PPid", []interface{}{})
	fake.pPidMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcess) PPidCallCount() int {
	fake.pPidMutex.RLock()
	defer fake.pPidMutex.RUnlock()
	return len(fake.pPidArgsForCall)
}

func (fake *FakeProcess) PPidCalls(stub func() int) {
	fake.pPidMutex.Lock()
	defer fake.pPidMutex.Unlock()
	fake.PPidStub = stub
}

func (fake *FakeProcess) PPidReturns(result1 int) {
	fake.pPidMutex.Lock()
	defer fake.pPidMutex.Unlock()
	fake.PPidStub = nil
	fake.pPidReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeProcess) PPidReturnsOnCall(i int, result1 int) {
	fake.pPidMutex.Lock()
	defer fake.pPidMutex.Unlock()
	fake.PPidStub = nil
	if fake.pPidReturnsOnCall == nil {
		fake.pPidReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.pPidReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeProcess) Pid() int {
	fake.pidMutex.Lock()
	ret, specificReturn := fake.pidReturnsOnCall[len(fake.pidArgsForCall)]
	fake.pidArgsForCall = append(fake.pidArgsForCall, struct {
	}{})
	stub := fake.PidStub
	fakeReturns := fake.pidReturns
	fake.recordInvocation("Pid", []interface{}{})
	fake.pidMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcess) PidCallCount() int {
	fake.pidMutex.RLock()
	defer fake.pidMutex.RUnlock()
	return len(fake.pidArgsForCall)
}

func (fake *FakeProcess) PidCalls(stub func() int) {
	fake.pidMutex.Lock()
	defer fake.pidMutex.Unlock()
	fake.PidStub = stub
}

func (fake *FakeProcess) PidReturns(result1 int) {
	fake.pidMutex.Lock()
	defer fake.pidMutex.Unlock()
	fake.PidStub = nil
	fake.pidReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeProcess) PidReturnsOnCall(i int, result1 int) {
	fake.pidMutex.Lock()
	defer fake.pidMutex.Unlock()
	fake.PidStub = nil
	if fake.pidReturnsOnCall == nil {
		fake.pidReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.pidReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeProcess) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executableMutex.RLock()
	defer fake.executableMutex.RUnlock()
	fake.pPidMutex.RLock()
	defer fake.pPidMutex.RUnlock()
	fake.pidMutex.RLock()
	defer fake.pidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcess) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ps.Process = new(FakeProcess)
