// Code generated by counterfeiter. DO NOT EDIT.
package gopsfakes

import (
	"sync"

	ps "github.com/mitchellh/go-ps"
)

type FakePs struct {
	FindProcessStub        func(int) (ps.Process, error)
	findProcessMutex       sync.RWMutex
	findProcessArgsForCall []struct {
		arg1 int
	}
	findProcessReturns struct {
		result1 ps.Process
		result2 error
	}
	findProcessReturnsOnCall map[int]struct {
		result1 ps.Process
		result2 error
	}
	ProcessesStub        func() ([]ps.Process, error)
	processesMutex       sync.RWMutex
	processesArgsForCall []struct {
	}
	processesReturns struct {
		result1 []ps.Process
		result2 error
	}
	processesReturnsOnCall map[int]struct {
		result1 []ps.Process
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePs) FindProcess(arg1 int) (ps.Process, error) {
	fake.findProcessMutex.Lock()
	ret, specificReturn := fake.findProcessReturnsOnCall[len(fake.findProcessArgsForCall)]
	fake.findProcessArgsForCall = append(fake.findProcessArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.FindProcessStub
	fakeReturns := fake.findProcessReturns
	fake.recordInvocation("FindProcess", []interface{}{arg1})
	fake.findProcessMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePs) FindProcessCallCount() int {
	fake.findProcessMutex.RLock()
	defer fake.findProcessMutex.RUnlock()
	return len(fake.findProcessArgsForCall)
}

func (fake *FakePs) FindProcessCalls(stub func(int) (ps.Process, error)) {
	fake.findProcessMutex.Lock()
	defer fake.findProcessMutex.Unlock()
	fake.FindProcessStub = stub
}

func (fake *FakePs) FindProcessArgsForCall(i int) int {
	fake.findProcessMutex.RLock()
	defer fake.findProcessMutex.RUnlock()
	argsForCall := fake.findProcessArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePs) FindProcessReturns(result1 ps.Process, result2 error) {
	fake.findProcessMutex.Lock()
	defer fake.findProcessMutex.Unlock()
	fake.FindProcessStub = nil
	fake.findProcessReturns = struct {
		result1 ps.Process
		result2 error
	}{result1, result2}
}

func (fake *FakePs) FindProcessReturnsOnCall(i int, result1 ps.Process, result2 error) {
	fake.findProcessMutex.Lock()
	defer fake.findProcessMutex.Unlock()
	fake.FindProcessStub = nil
	if fake.findProcessReturnsOnCall == nil {
		fake.findProcessReturnsOnCall = make(map[int]struct {
			result1 ps.Process
			result2 error
		})
	}
	fake.findProcessReturnsOnCall[i] = struct {
		result1 ps.Process
		result2 error
	}{result1, result2}
}

func (fake *FakePs) Processes() ([]ps.Process, error) {
	fake.processesMutex.Lock()
	ret, specificReturn := fake.processesReturnsOnCall[len(fake.processesArgsForCall)]
	fake.processesArgsForCall = append(fake.processesArgsForCall, struct {
	}{})
	stub := fake.ProcessesStub
	fakeReturns := fake.processesReturns
	fake.recordInvocation("Processes", []interface{}{})
	fake.processesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePs) ProcessesCallCount() int {
	fake.processesMutex.RLock()
	defer fake.processesMutex.RUnlock()
	return len(fake.processesArgsForCall)
}

func (fake *FakePs) ProcessesCalls(stub func() ([]ps.Process, error)) {
	fake.processesMutex.Lock()
	defer fake.processesMutex.Unlock()
	fake.ProcessesStub = stub
}

func (fake *FakePs) ProcessesReturns(result1 []ps.Process, result2 error) {
	fake.processesMutex.Lock()
	defer fake.processesMutex.Unlock()
	fake.ProcessesStub = nil
	fake.processesReturns = struct {
		result1 []ps.Process
		result2 error
	}{result1, result2}
}

func (fake *FakePs) ProcessesReturnsOnCall(i int, result1 []ps.Process, result2 error) {
	fake.processesMutex.Lock()
	defer fake.processesMutex.Unlock()
	fake.ProcessesStub = nil
	if fake.processesReturnsOnCall == nil {
		fake.processesReturnsOnCall = make(map[int]struct {
			result1 []ps.Process
			result2 error
		})
	}
	fake.processesReturnsOnCall[i] = struct {
		result1 []ps.Process
		result2 error
	}{result1, result2}
}

func (fake *FakePs) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findProcessMutex.RLock()
	defer fake.findProcessMutex.RUnlock()
	fake.processesMutex.RLock()
	defer fake.processesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePs) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ps.Ps = new(FakePs)
